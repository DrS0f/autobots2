version: '3.8'

services:
  mongo:
    image: mongo:6
    container_name: gram_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${DB_NAME:-instagram_automation}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - instagram_automation_network
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: gram_backend
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password}@mongo:27017/${DB_NAME:-instagram_automation}?authSource=admin
      - PYTHONPATH=/app/backend
    ports:
      - "8000:8000"
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend:ro
      - backend_logs:/app/logs
    networks:
      - instagram_automation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    entrypoint: ["/app/scripts/wait-for-mongo.sh"]
    command: ["python", "-m", "uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: production
    container_name: gram_frontend
    restart: unless-stopped
    env_file: .env
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - NODE_ENV=production
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - instagram_automation_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  init:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: development
    container_name: gram_init
    env_file: .env
    environment:
      - MONGO_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-password}@mongo:27017/${DB_NAME:-instagram_automation}?authSource=admin
      - PYTHONPATH=/app/backend
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend:ro
      - ./scripts:/app/scripts:ro
    networks:
      - instagram_automation_network
    restart: "no"
    command: ["python", "/app/scripts/init_db.py"]

volumes:
  mongo_data:
    driver: local
  backend_logs:
    driver: local

networks:
  instagram_automation_network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
# This file can be extended with docker-compose.dev.yml for development-specific settings